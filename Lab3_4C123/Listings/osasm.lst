


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123/MSP432
    4 00000000         ; Lab 3 starter file
    5 00000000         ; March 2, 2016
    6 00000000         ;
    7 00000000         
    8 00000000         
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000                 THUMB
   11 00000000                 REQUIRE8
   12 00000000                 PRESERVE8
   13 00000000         
   14 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   15 00000000                 EXPORT           StartOS
   16 00000000                 EXPORT           SysTick_Handler
   17 00000000                 IMPORT           Scheduler
   18 00000000         
   19 00000000         
   20 00000000         ; implementation of register state saving, thread switch
                       ing and register state restoring
   21 00000000         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   22 00000000 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
   23 00000002 E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
   24 00000006 480F            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
   25 00000008 6801            LDR              R1, [R0]    ;    R1 = RunPt
   26 0000000A F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
   27 0000000E B501            PUSH             {R0,LR}     ; Save EXC_RETURN
   28 00000010 F7FF FFFE       BL               Scheduler   ; Call scheduler 
   29 00000014 E8BD 4001       POP              {R0,LR}     ; Restore EXC_RETUR
                                                            N
   30 00000018 6801            LDR              R1, [R0]    ; 6) R1 = RunPt, ne
                                                            w thread
   31 0000001A F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   32 0000001E E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
   33 00000022 B662            CPSIE            I           ; 9) tasks run with
                                                             interrupts enabled
                                                            
   34 00000024 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   35 00000026         
   36 00000026         ; implementation of register loading from stack
   37 00000026         StartOS
   38 00000026 4807            LDR              R0, =RunPt  ; Currently running
                                                             thread which loads
                                                             addr of RunPt into
                                                             R0
   39 00000028 6801            LDR              R1, [R0]    ; R1 = value of Run



ARM Macro Assembler    Page 2 


                                                            Pt, Loads value of 
                                                            RunPt into R1
   40 0000002A F8D1 D000       LDR              SP, [R1]    ; New thread SP; SP
                                                             = RunPt ->stackPoi
                                                            nter; Load thread's
                                                             SP from TCB into C
                                                            PU SP
   41 0000002E E8BD 0FF0       POP              {R4-R11}    ; restore regs R4-1
                                                            1 and Pops R4 - R11
                                                             from new SP (SP no
                                                            w in the section of
                                                             R0)
   42 00000032 BC0F            POP              {R0-R3}     ; restore regs R0-3
                                                             and Pops R0 - R3 f
                                                            rom SP (SP = R12)
   43 00000034 F85D CB04       POP              {R12}       ; Pops R12 (SP = LR
                                                             (R14))
   44 00000038 B001            ADD              SP, SP, #4  ; discard LR from i
                                                            nitial stack menain
                                                            g it Skips LR by ad
                                                            ding SP (so, SP = P
                                                            C)
   45 0000003A         ; Here, LR is not active as it is the initial run
   46 0000003A F85D EB04       POP              {LR}        ; Start Location, S
                                                            P = PSR, it Pops PC
                                                             (R15) into LR
   47 0000003E B001            ADD              SP, SP, #4  ; Discard PSR by SP
                                                             (SP = task’s stack
                                                            )
   48 00000040 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   49 00000042 4770            BX               LR          ; start first threa
                                                            d
   50 00000044         
   51 00000044                 ALIGN
   52 00000044                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\osasm.d -o.\objects\osasm.o -I.\RTE\_Target -IC:\Users\S
hawon\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Sha
won\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predef
ine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 534" --predefine="_RTE_
 SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\
listings\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file osasm.s
   Uses
      None
Comment: .text unused
StartOS 00000026

Symbol: StartOS
   Definitions
      At line 37 in file osasm.s
   Uses
      At line 15 in file osasm.s
Comment: StartOS used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 21 in file osasm.s
   Uses
      At line 16 in file osasm.s
Comment: SysTick_Handler used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 14 in file osasm.s
   Uses
      At line 24 in file osasm.s
      At line 38 in file osasm.s

Scheduler 00000000

Symbol: Scheduler
   Definitions
      At line 17 in file osasm.s
   Uses
      At line 28 in file osasm.s
Comment: Scheduler used once
2 symbols
341 symbols in table
